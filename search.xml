<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[ShadowSocks（影梭）]]></title>
      <url>%2F2017%2F02%2F06%2FShadowSocks%EF%BC%88%E5%BD%B1%E6%A2%AD%EF%BC%89%2F</url>
      <content type="text"><![CDATA[影梭也用了一段时间，最近刚好把使用中遇到的问题分享一下。里面好些内容都是网上摘抄的，感觉比我自己讲的好很多，看了很受启发也就拿来用了。 什么是 ShadowSocks （影梭）ShadowSocks 是由@clowwindy所开发的一个开源 Socks5 代理。如其官网所言 ，它是 “A secure socks5 proxy, designed to protect your Internet traffic” （一个安全的 Socks5 代理）。其作用，亦如该项目主页的 wiki（中文版） 中所说，“A fast tunnel proxy that helps you bypass firewalls” （一个可穿透防火墙的快速代理）。 不过，在中国，由于GFW的存在，更多的网友用它来进行科学上网。 ShadowSocks 的原理这里推荐“写给非专业人士看的 Shadowsocks 简介”，讲的非常清楚。为防止有同学无法访问该文章，这里摘抄出来： long long ago… 在很久很久以前，我们访问各种网站都是简单而直接的，用户的请求通过互联网发送到服务提供方，服务提供方直接将信息反馈给用户 when evil comes 然后有一天，GFW 就出现了，他像一个收过路费的强盗一样夹在了在用户和服务之间，每当用户需要获取信息，都经过了 GFW，GFW将它不喜欢的内容统统过滤掉，于是客户当触发 GFW 的过滤规则的时候，就会收到 Connection Reset 这样的响应内容，而无法接收到正常的内容 ssh tunnel 聪明的人们想到了利用境外服务器代理的方法来绕过 GFW 的过滤，其中包含了各种HTTP代理服务、Socks服务、VPN服务… 其中以 ssh tunnel 的方法比较有代表性 1) 首先用户和境外服务器基于 ssh 建立起一条加密的通道2-3) 用户通过建立起的隧道进行代理，通过 ssh server 向真实的服务发起请求4-5) 服务通过 ssh server，再通过创建好的隧道返回给用户 由于 ssh 本身就是基于 RSA 加密技术，所以 GFW 无法从数据传输的过程中的加密数据内容进行关键词分析，避免了被重置链接的问题，但由于创建隧道和数据传输的过程中，ssh 本身的特征是明显的，所以 GFW 一度通过分析连接的特征进行干扰，导致 ssh存在被定向进行干扰的问题 shadowsocks 于是 clowwindy 同学分享并开源了他的解决方案 简单理解的话，shadowsocks 是将原来 ssh 创建的 Socks5 协议拆开成 server 端和 client 端，所以下面这个原理图基本上和利用 ssh tunnel 大致类似 1、6) 客户端发出的请求基于 Socks5 协议跟 ss-local 端进行通讯，由于这个 ss-local 一般是本机或路由器或局域网的其他机器，不经过 GFW，所以解决了上面被 GFW 通过特征分析进行干扰的问题2、5) ss-local 和 ss-server 两端通过多种可选的加密方法进行通讯，经过 GFW 的时候是常规的TCP包，没有明显的特征码而且 GFW 也无法对通讯数据进行解密3、4) ss-server 将收到的加密数据进行解密，还原原来的请求，再发送到用户需要访问的服务，获取响应原路返回 Shadowsocks 的优劣优势 支持远程 DNS 解析，防止 DNS 污染。由于 socks5 代理支持远程 DNS 解析，因此不用另外再去找国外的 DNS 服务器，DNS查询直接递给远程代理服务器，然后通过墙外 DNS 服务器查询得到结果再传回客户端。从而 DNS 污染鞭长莫及。 安全。所有数据流量全部经过加密，加密算法可选并支持自定义算法。另外，远程 DNS 解析也使得本地的 ISP 无法通过 DNS 查询获取你所访问的网站。 隐蔽。 OPENVPN 和 VPNgate 都是死在了特征检测上，通常来说基于证书的身份认证过程和密钥交换过程都会带来独特的协议指纹（ OPENVPN 有着一套复杂完善的身份认证机制，估计 GFW 就是识别出了这一机制的协议指纹从而成功干掉 OPENVPN 的），从而使得他们在 handshake 阶段就被 GFW 识别出来并阻断了；但 ShadowSocks 直接放弃了服务器端身份认证，也抛弃了密钥协商过程（ TLS 连接就是在 handshake 阶段协商出随机密钥的），而是采取事先在服务器端设置好固定密钥的方式来应对加密连接的（设置shadowsocks客户端和服务器端的时候要填写同一个密码，这就是事先设置好的用于加密和解密的密钥）。这样做就大大减少了协议特征，再加上一般的 ShadowSocks 服务器端都是个人租用的专用服务器，流量很小，从而很难被 GFW 发现和封杀。 速度相对较快。由于其隐蔽性，只会有很少的数据包会被 GFW 丢弃，从而保证了连接速度。 连接稳定。同样由于其隐蔽性，较小的丢包率带来的是稳定的连接。智能切换。 传统的 VPN 方式，在切换网络时非常不方便， 比如连上国外的 VPN 之后会发现访问国内的网站速度严重下降。 ShadowSocks 支持 PAC 列表，根据 PAC 中的规则，有针对性地选用恰当的网络访问方式，兼顾了访问速度与访问效率。移动客户端还支持针对不同应用设置单独代理。 去中心化。服务器端搭建方便快捷，每个人都可以自己动手搭建属于自己的服务器端。部分人以免费或者收费方式共享自己的服务器，即使不想动手搭建的也有很多的免费账号或购买渠道可以选择。代码开源。不像某些蜜罐式的翻墙工具，开源的代码保证了无后门，从而为上网的隐私性与安全性提供保障。客户端配置简单。配置时只需要填写 IP /域名、端口号，密码，然后选择加密方式即可。客户端绿色小巧。Windows版本的客户端只有200多k，而且免安装，解压即可使用。 省电。在移动端上使用，电量管理中几乎看不到它的身影。支持开机启动，断网无影响，无需手动重连，方便网络不稳定或者3G&amp;Wi-Fi频繁切换的小伙伴。跨平台。支持主流系统包括 Windows， Linux， Mac， Android, IOS，都有对应的客户端支持。 劣势若自己搭建 ShadowSocks 服务，需要一定的 技术成本。因为大部分服务端是基于运行 Linux 的 VPS（虚拟主机）搭建，因此需要学会使用 putty 等远程管理工具的使用方法，并掌握一定的Linux基本命令行操作。金钱成本。租用国外的服务器，需要价格不菲的费用。若使用免费 ShadowSocks 账号，可能有一定的 时间精力成本。很多免费账号由于使用者众多，人均流量很小，导致网速慢，不稳定，需要不断寻找新的替代，且很多免费账号会定时更新密码，或者是有流量限制，或者是需要定时签到等等，这些都需要花费时间和精力去一一满足需求才能短暂使用。安全成本。有一些人会将自己的 ShadowSocks 节点免费分享出来，这些人是非常值得肯定和称赞的！但是其中有一小部分人别有居心，例如在 ShadowSocks 的服务器端监听网络流量，进行中间人攻击等，这类钓鱼服务器会严重损害用户的个人信息安全。若购买收费的 ShadowSocks 账号， 需要一定的 金钱成本 由于很多 ShadowSocks 卖家都是以盈利为目的，需要花费一定的费用。那么，自己想要有一个影梭账号的话，到底是选用哪种比较好呢？可以看到网上很多卖 ShadowSocks 账号的，有的价格很便宜，比自己搭服务器划算多了，是不是直接购买一个账号比较好呢？在这里我建议大家自己搭服务器，或者找几个人一起租个服务器比较划算。不推荐购买商业出售的 ShadowSocks。商业的出售 ShadowSocks 账号的行为绝大部分都是耍流氓。试着算一下，作为一个 ShadowSocks 出售者，他们的成本是服务器的租用费用，而收入是购买 ShadowSocks 账号人数 × 每人花费的 ShadowSocks 账号购买价格。我们假设，一台服务器的租用成本，是 10 美元一个月，那么如果要想不亏本，且做到低价，假设现在卖给十个人，那么至少每个人每月要 1 美元。但是，服务器的带宽是有限的，假设是 100M 的带宽，那么平均分下来人均带宽只有 10M，而服务器的流量一般也是有限的，如果一共是 1000 M 的流量，那么每人每月只分到 100M 。如果超出流量，服务器的租用费用会增加，就好像我们手机流量超出后，额外的流量需要交钱一样。因此，购买的流量一般都会受限制。从上面的例子可以看到，服务器资源是大家共享的，使用的人越多，人均分到的资源就越少。但是， ShadowSocks 的卖家需要赚钱，那么怎么办呢？当然是最小化成本，并最大化收入了。也就是说，尽量租用少量廉价的服务器，然后将它以尽可能高的价格卖给尽可能多的消费者。因此，对于 ShadowSocks 的商家而言，超售（即一台服务器原本最多10个人用的，可能最后卖了100个人）的现象非常严重，消费者最终所能享受到的流量和连接速度显然对不起自己的花费。不如自己租个服务器，不仅能有一个稳定放心的服务器，还能顺便学习些 Linux 的相关知识。如果嫌麻烦，可以找那种大家一起租一个服务器的，相对而言，至少有一点可以保证，就是不会有各种奇奇怪怪的限制，比如不能发邮件，不能看视频，不能下载特定的某些资源等等。而且最大的一个好处是，租用的人数一般较少，最重要的是这种一般不用担心超售，各方面性能配置等有保证。ShadowSocks 配置 服务器端配置服务器的选择首先是选择一款合适的国外主机作为服务器，一般而言，用来作 ShadowSocks 的服务器的话，并不需要一台独立的国外主机，只需要选择一款虚拟主机（Virtual Private Server，简称 VPS）即可满足需要。这里推荐几家较常用的VPS。 BandwagonHOST（俗称搬瓦工）,Vultr,Linode,枫叶说实话除了搬瓦工都不推荐，其他的太贵了，而且搬瓦工有一键部署SS服务端的功能，也支持支付宝支付，对于只作为翻墙用的服务器是首选。 服务端安装安装 python 的 pip1yum install python-setuptools &amp;&amp; easy_install pip 然后安装 shadowsocks1pip install shadowsocks 增加配置文件1vi /etc/shadowsocks.json 内容如下12345678910&#123; "server":"your_server_ip", "server_port":8388, "local_address": "127.0.0.1", "local_port":1080, "password":"auooo.com", "timeout":300, "method":"aes-256-cfb", "fast_open": false&#125; 名称 说明 server 填入你的服务器 IP ，即当前操作的 VPS 的 IP 地址，必须修改 server_port 服务器端口，可以根据实际需要修改，或者保持默认 local_address 本地监听地址，建议保持默认 local_port 本地端口，这个参数一般保持默认即可 password 用来加密的密码，可以根据实际需要修改 timeout 单位秒，一般保持默认即可 method 默认的是”aes-256-cfb”，一般保持默认即可 fast_open 使用TCP_FASTOPEN, 参数选项true / false，一般保持默认即可 workers worker的数量, 在 Unix/Linux 上有效，一般不用加此项 启动1ssserver -c /etc/shadowsocks.json -d start 停止1ssserver -c /etc/shadowsocks.json -d stop 增加开机启动1vi /etc/rc.local 增加1ssserver -c /etc/shadowsocks.json -d start server 安装，配置文件 客户端下载下载地址提取码:z6d6 客户端配置配置在服务端JSON中设置的值就可以了 作者回答问题 当时几个版本内置的公共服务器流量爆了，打算把公共服务器给 @showfom 运营，并帮 @showfom 架设了服务。但没想到实际情况变成了用名气来进行宣传，也没想到这个服务会被用户当成“官方”，所以为了避免这种误解，加上精力也不够，还是取消了合作，没有收一分钱。在 Twitter 发过澄清，没在 V2EX 发是一个疏忽。至于在代码里加红字警告? Are you kidding? 一个开源项目，代码本身应该是中立的，是不应该有立场的。 为了避免今后出现类似的情况，在这里做一个声明：Shadowsocks 是一个由很多人参与的开源项目，它只是一个程序，一套算法。这些人是以自由的形式凭自己的兴趣参与这个项目的，不存在“Shadowsocks 团队”，只存在贡献者。哪天现在的这些人不维护这些代码了，也会有其他人继续维护下去。至于 Shadowsocks 的使用，只要不违反开源授权，不会干涉。 公共服务器还是免费，只是做了限速以免流量用超。OS X 版的公共服务器速度慢到不能用的时候直接关掉了。和 GFW 捉迷藏换 IP 的游戏，虽然已经半自动化，但一点也不好玩，你们明白 fqrouter 为什么要关了吧。 从实际情况上来看，Shadowsocks 没有办法离开去中心化的服务器。要么自己花钱买 VPS，要么用有人分享的账号，要么用有人提供的付费服务，他们各有所长，适合不同的人。所以作为开发者，保持中立，不偏袒其中任何一方，顺其自然发展下去是最好的吧。 很多人要么一窝蜂的支持，要么一窝蜂的反对，还要把它给封禁掉，大概这种心理鲁迅先生也曾批判过。我还记得当年极路由在 V2EX 被冤枉的时候，也是一边倒的说极路由窃取隐私。如果你们真的那么讨厌商业，那你们应该首先把你们的苹果设备给摔了，因为它就是商业社会巅峰造极的产物。我反对不喜欢一个东西就要拿出简单粗暴的制裁手段，正是这种习性成就了 GFW。 维护这个项目到现在大概总共回复过几千个问题，开始慢慢想清楚了一件事，为什么会存在 GFW。从这些提问可以看出，大部分人的自理能力都很差，只是等着别人帮他。特别是那些从 App Store 下载了 App 用着公共服务器的人，经常发来一封只有四个字的邮件：“不能用了？” 我觉得这是一个社会常识，花一分钟写的问题，不能期待一个毫无交情的陌生人花一个小时耐心地问你版本和操作步骤，模拟出你的环境来帮你分析解决。Windows 版加上 GFWList 功能以来，我反复呼吁给 GFWList 提交规则，但是一个月过去了竟然一个提交都没有。如果没有人做一点什么，它自己是不会更新的啊，没有人会义务地帮你打理这些。最近 net-speeder 又开始流行，害人害己。我觉得，政府无限的权力，都是大部分人自己放弃的。假货坑爹，让政府审核。孩子管不好，让政府关网吧。有人在微博骂我，让政府去删。房价太高，让政府去限购。我们的文化实在太独特，创造出了家长式威权政府，GFW 正是在这种背景下产生的，一个社会矛盾的终极调和器，最终生活不能自理的你每天做的每一件事情都要给政府审查一遍，以免伤害到其他同样生活不能自理的人。这是一个零和游戏，越和这样的用户打交道，越对未来持悲观态度，觉得 GFW 可能永远也不会消失，而墙内的这个局域网看起来还似乎生机勃勃的自成一体，真是让人绝望。顺便回答几个其它的问题吧。 为什么项目的文档和网站是英文的？开源项目用英文来维护本来就是一个约定俗成的做法。网络审查和屏蔽不是一个国家的事情，而是一个世界性的问题。这些项目有很多其它国家的用户，也有一些国外的大牛作出过宝贵的贡献。 参与的人只是凭兴趣做自己喜欢的事情，如果你的 issue 不像是一种思考和贡献，而更像是咨询客服，那被关掉了不要觉得惊讶。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo+githubpage安装配置]]></title>
      <url>%2F2017%2F02%2F03%2Fhexo%2Bgithub%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[最近终于用hexo+githubpage把个人博客建立了，中间遇到不少的坑，记下来省的再犯。 githubpagegithubpage真的是个好项目，为我们广大屌丝解决了很多问题具体的不想详细介绍不管是度娘还是谷哥都是一大堆。就给个地址: githubpage hexohexo也没啥说的官网巨详细基本就是照着做就可以地址:hexo themeshexo的社区很活跃提供的样式也很多这里选择了 next 这个被加星最多的样式，感觉还是很不错的该有的功能一应俱全 nextnext 主题功能全面，这里我只把个人修改的地方做个介绍 我修改了主题里的footer模板，原因是我对HEXO强力驱动和next主题支持这个标签实在是无爱了footer模板位置：themes\next\layout_partials\footer.swig模板很容易看懂，修改自己需要的内容就可以了。ps:注意里面变量的值是从你设置的对应语言的YML中获取的，我设置的简体中文。文件位置在themes/next/languages/zh-Hans.yml next的标签页面我不太喜欢，或者说是hexo的tagcloud样子我觉得都不是太爱。所以修改了样式，参考了freemind的标签样式 修改模板 themes\next\page.swig 替换了原有的标签生成修改为自定的 div与样式 12345678910111213141516&lt;div id="posts" class="posts-expand"&gt;&#123;% include '_partials/page-header.swig' %&#125; &#123;# tagcloud page support #&#125; &#123;% if page.type === "tags" %&#125; &lt;div class="tag-cloud"&gt; &lt;div class="tag-cloud-title"&gt; &#123;&#123; _p('counter.tag_cloud', site.tags.length) &#125;&#125; &lt;/div&gt; &lt;div class="widget"&gt; &lt;ul class="tag_box inline list-unstyled"&gt; &#123;% for item in site.tags %&#125; &lt;li&gt;&lt;a href="&#123;&#123;config.root&#125;&#125;&#123;&#123;item.path&#125;&#125;"&gt;&#123;&#123;item.name&#125;&#125;&lt;span&gt;&#123;&#123;item.posts.length&#125;&#125;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; 修改样式 themes\next\source\css_common\components\post\post-tags.styl中增加 123456789101112131415161718192021222324252627282930313233343536373839.widget &#123; padding-bottom: 25px; border-bottom: 1px solid #e0e0e0;&#125;.tag_box &#123; margin:0; overflow:hidden;&#125;.tag_box li &#123; line-height:28px;&#125;.tag_box li i &#123; opacity:0.9;&#125;.tag_box.inline li &#123; float:left;&#125;.tag_box a &#123; padding: 2px 6px; margin: 2px; background: #e5e5e5; color:#555; border-radius: 3px; text-decoration:none; border:1px dashed #bbb;&#125;.tag_box a span&#123; vertical-align:super; font-size:0.8em;&#125;.tag_box a:hover &#123; background-color:#397bdd; color:#FFF;&#125;.tag_box a.active &#123; background:#57A957; border:1px solid #4C964D; color:#FFF;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[github CNAME 设置]]></title>
      <url>%2F2017%2F02%2F03%2FCNAME%E9%85%8D%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[每次提交页面到githubpage上后总是受到一封警告邮件，虽说不影响访问但是被骚扰的很烦，(github的好意实在是太频繁了) The page build completed successfully, but returned the following warning:Your site’s DNS settings are using a custom subdomain, www.wenfanchao.win, that’s set up as an A record. We recommend you change this to a CNAME record pointing at wenfanchao.github.io. For more information, see https://help.github.com/pages/.For information on troubleshooting Jekyll see:https://help.github.com/articles/troubleshooting-jekyll-builds 有用的核心就是高亮的那句，意思很明确你的域名没有指向一个正确的地址 解决办法 首先在hexo的suorce中增加CNAME文件，内容就是你购买的域名 1www.wenfanchao.win 然后就在万网控制台修改A记录地址并增加CNAMECNAME的值就是你githubpage地址:wenfanchao.github.io 使用dig命令获取A记录的值1dig wenfanchao.github.io +nostats +nocomments +nocmd 注意wenfanchao.github.io为你博客的地址。 windows安装dig到百度云盘下载如下dig工具地址：链接：http://pan.baidu.com/s/1gedd9WB 密码：wtr3安装完毕后在环境变量中添加就能使用了]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo模板之ejs与Swig的优劣]]></title>
      <url>%2F2017%2F02%2F02%2Fhexo%E6%A8%A1%E6%9D%BF%E4%B9%8Bejs%E4%B8%8ESwig%E7%9A%84%E4%BC%98%E5%8A%A3%2F</url>
      <content type="text"><![CDATA[2个模板hexo刚入坑，随便从网上down了2个themes一个next，一个freemind 简单说一下认识ejs比swig语法更丰富当然这和2个模板的定位不一样,但是对我这种懒人来说EJS更好用为啥就举例一个 ejs1site.tags.random().limit(20) swig没有直接导致我要随机输出标签的功能完蛋。 swig只能老实的123&#123;% for item in site.tags %&#125; &lt;li&gt;&lt;a href=&quot;&#123;&#123;config.root&#125;&#125;&#123;&#123;item.path&#125;&#125;&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;span&gt;&#123;&#123;item.posts.length&#125;&#125;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#123;% endfor %&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2016%2F12%2F03%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new [layout] &lt;title&gt; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
